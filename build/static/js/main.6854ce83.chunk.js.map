{"version":3,"sources":["StoryDisplay.js","containers/StoryContainer.js","App.js","serviceWorker.js","index.js"],"names":["StoryDisplay","state","isClicked","handleClick","_this","setState","getPhoto","multimedia","length","react_default","a","createElement","alt","src","array","forEach","media","type","subType","string","concat","url","push","TitleOrInfo","id","onClick","className","props","story","snippet","rel","target","href","web_url","headline","main","this","React","Component","StoryContainer","stories","searchTerm","handleChange","event","value","_this2","input","arguments","undefined","fetch","then","results","json","data","response","docs","fetchRequest","map","src_StoryDisplay","key","_this3","placeholder","onChange","e","storyRender","App","containers_StoryContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6854ce83.chunk.js","sourcesContent":["import React from 'react';\n\nclass StoryDisplay extends React.Component {\n\nstate = {\n  isClicked : false\n}\n\nhandleClick = () => {\n  this.setState({isClicked:!this.state.isClicked})\n}//end of handleClick- this function will make the component \"know\" if it has been clicked, storing the information in state\n\n//I built this function to deal with the case that stories might not have a photo in their multimedia package\ngetPhoto = (multimedia) => {\n  if (multimedia.length === 0){\n      return (<img alt='' src ='https://myintuition.org/wp-content/uploads/2018/09/the-new-york-times-logo.jpg'/>)\n    }else{\n    let array = []\n    multimedia.forEach(media =>{\n        if (media.type === 'image' && media.subType === 'thumbnail' && array.length <=1){\n          let string = `https://static01.nyt.com/${media.url}`\n\n          array.push(string)\n        }\n      })\n      return (<img alt='' src= {array[0]}/>)\n\n    }\n\n\n}//end of getPhoto\n\nTitleOrInfo = (isClicked) => {\n  if (isClicked === true){\n    return (\n      <div id='storyCard' onClick={this.handleClick}>\n        <p className='snippet'>{this.props.story.snippet}</p>\n        <a rel=\"noopener noreferrer\" target=\"_blank\" href={this.props.story.web_url}>Click Here To Read The Story!</a>\n      </div>)\n\n  }else{\n    return (\n      <div id='storyCard' onClick={this.handleClick}>\n        <h2>{this.props.story.headline.main} </h2>\n        {this.getPhoto(this.props.story.multimedia)}\n      </div>)\n  }\n}//end of TitleOrInfo\n\nrender () {\n    return(\n      <div className='story'>\n      {this.TitleOrInfo(this.state.isClicked)}\n      </div>)\n  }\n\n}\n\n\nexport default StoryDisplay\n","import React from 'react'\n\n//components\nimport StoryDisplay from '../StoryDisplay'\n\nclass StoryContainer extends React.Component{\n\n\n  state = {\n    stories:[],\n    searchTerm:''\n  }\n\n  handleChange = (event) => {\n     this.setState({searchTerm : event.target.value})\n   }\n\n\n  fetchRequest(input=''){\n    input =`&q=` + input\n    const url = `https://api.nytimes.com/svc/search/v2/articlesearch.json?fq=source:(%22The%20New%20York%20Times%22)${input}&sort=newest&api-key=W01gIBZNA12SAoUjGQ5Tvv9moSjSGshj`\n\n    fetch(url)\n      .then(results =>results.json())\n      .then(data => {\n        this.setState({stories:data.response.docs})\n    })\n  }\n\n  componentDidMount(){\n    this.fetchRequest()\n  }\n\n  storyRender(stories){\n    return stories.map( story => <StoryDisplay key={story.headline.main} className='story' story= {story} />)\n  }\n\n\n\n  render(){\n    return(\n      <div >\n\n        <div className=\"searchBarDiv\">\n          <img alt='' src=\"https://blueharvest.io/bundle/fd5e4e9ceeeb2801f3f86b21465237bc-327.png\"/>\n          <h2>Blue Harvest New York Times App</h2>\n          <input type=\"text\" id=\"searchBar\"\n            placeholder='Search Term Here'\n            onChange={this.handleChange}/>\n          <button className='Button' onClick={(e)=> this.fetchRequest(this.state.searchTerm)}>Search News! </button>\n        </div>\n\n        <div className='container'>\n      {this.storyRender(this.state.stories)}\n      </div>\n      </div>)\n  }\n}\n\nexport default StoryContainer\n","import React from 'react';\nimport './App.css';\n\n\n//components\nimport StoryContainer from './containers/StoryContainer'\n\n\nclass App extends React.Component {\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <StoryContainer />\n      </div>\n    );\n  }//end of render\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}